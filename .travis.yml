#sudo: false
#dist: trusty

#os:
#  - linux
#  - osx

script: echo "Running tests ..."

env:
  global:
    - ANDROID_API_LEVEL=27
    - EMULATOR_API_LEVEL=22
    - ANDROID_BUILD_TOOLS_VERSION=27.0.3
    - ANDROID_ABI="default;armeabi-v7a"

jobs:
  include:


#    - &unit-test-staging
#      stage: Unit Testing
#      language: generic
#      os: linux
#      env: TEST=Test1
##      before_script:
##        - git clone https://github.com/flutter/flutter.git -b beta
##        - export PATH="$PATH":"$HOME/.pub-cache/bin"
##        - export PATH=`pwd`/flutter/bin:`pwd`/flutter/bin/cache/dart-sdk/bin:$PATH
##        - flutter precache
##        - flutter doctor -v
##        - pub global activate coverage
#      after_success: echo after success
#      script: echo "test 1 ..."
#    - <<: *unit-test-staging
#      os: osx
#      env: TEST=Test1
#      script: echo "test 1 ..."
#    - <<: *unit-test-staging
#      os: linux
#      env: TEST=Test2
#      script: echo "test 2 ..."
#    - <<: *unit-test-staging
#      os: osx
#      env: TEST=Test2
#      script: echo "test 2 ..."
#    - <<: *unit-test-staging
#      os: linux
#      env: TEST=Test3
#      script: echo "test 3 ..."
#    - <<: *unit-test-staging
#      os: osx
#      env: TEST=Test3
#      script: echo "test 3 ..."


#    - stage: coverage
#      os: linux
#      # todo: use yaml var for install
#      script: echo "code coverage ..."


    - &integration-test-staging
      stage: Integration Testing
      sudo: true
      dist: trusty
      language: generic
      os: linux
      env: INT_TEST=Test1
      before_install: &before_install_linux
        - echo $PATH
        - sudo apt-get install -y --no-install-recommends lib32stdc++6 libstdc++6
        # Install the Android SDK Dependency.
        - ANDROID_SDK_URL="https://dl.google.com/android/repository/sdk-tools-linux-4333796.zip"
        - ANDROID_TOOLS_ROOT="/opt/android_sdk"
        - mkdir -p "${ANDROID_TOOLS_ROOT}"
        - mkdir -p ~/.android
        # Silence warning.
        - touch ~/.android/repositories.cfg
        - ANDROID_SDK_ARCHIVE="${ANDROID_TOOLS_ROOT}/archive"
        - wget --progress=dot:giga "${ANDROID_SDK_URL}" -O "${ANDROID_SDK_ARCHIVE}"
        - unzip -q -d "${ANDROID_TOOLS_ROOT}" "${ANDROID_SDK_ARCHIVE}"
        - PATH="${ANDROID_TOOLS_ROOT}/tools:${PATH}"
        - PATH="${ANDROID_TOOLS_ROOT}/tools/bin:${PATH}"
        - export ANDROID_HOME=$ANDROID_TOOLS_ROOT
        # Suppressing output of sdkmanager to keep log size down
        # (it prints install progress WAY too often).
        - yes "y" | sdkmanager "tools" > /dev/null
#        - yes "y" | sdkmanager "build-tools;28.0.0" > /dev/null
#        - yes "y" | sdkmanager "platforms;android-28" > /dev/null
        - yes "y" | sdkmanager "platform-tools" > /dev/null
        - yes "y" | sdkmanager "extras;android;m2repository" > /dev/null
        - yes "y" | sdkmanager "extras;google;m2repository" > /dev/null
#        - yes "y" | sdkmanager "patcher;v4" > /dev/null
        - rm "${ANDROID_SDK_ARCHIVE}"

        # download specific emulator 27.3.10.0 (build_id 4969155)
#        - ANDROID_EMULATOR_ARCHIVE="${ANDROID_TOOLS_ROOT}/emulator_archive"
#        - ANDROID_EMULATOR_URL=http://dl.google.com/android/repository/emulator-linux-4969155.zip
#        - wget --progress=dot:giga ${ANDROID_EMULATOR_URL} -O "${ANDROID_EMULATOR_ARCHIVE}"
#        - unzip -q -d "${ANDROID_TOOLS_ROOT}" "${ANDROID_EMULATOR_ARCHIVE}" # don't override license
#        - rm "${ANDROID_EMULATOR_ARCHIVE}"
#        - $ANDROID_HOME/emulator/emulator -version
        - sdkmanager --install emulator > /dev/null
        - sdkmanager --list | head -15

#        # uninstall newer packages
#        - sdkmanager --uninstall "build-tools;27.0.3" "build-tools;28.0.0" "platforms;android-28"
        # install older packages
        - yes | sdkmanager "build-tools;25.0.2" "platforms;android-25" "extras;google;google_play_services" > /dev/null
#        - yes | sdkmanager "build-tools;$ANDROID_BUILD_TOOLS_VERSION" >/dev/null
#        - sdkmanager --uninstall "build-tools;27.0.3"
        - sdkmanager --list | head -15
        # Install the rest of tools (e.g., avdmanager)
#        - sdkmanager "tools"
        # Create and start emulator.
        - sdkmanager "system-images;android-$EMULATOR_API_LEVEL;$ANDROID_ABI" > /dev/null
        - sdkmanager --list | head -15
        - echo no | avdmanager create avd --force -n test -k "system-images;android-$EMULATOR_API_LEVEL;$ANDROID_ABI"
        - $ANDROID_HOME/emulator/emulator -avd test -no-audio -no-window &

        # install flutter
#        - apt-get install -y --no-install-recommends lib32stdc++6 libstdc++6
        - git clone https://github.com/flutter/flutter.git -b beta
        - export PATH="$PATH":"$HOME/.pub-cache/bin"
        - export PATH=`pwd`/flutter/bin:`pwd`/flutter/bin/cache/dart-sdk/bin:$PATH
        - flutter precache
        - flutter doctor -v

        # Wait for emulator to startup.
        - PATH="${ANDROID_TOOLS_ROOT}/platform-tools:${PATH}" # add adb to path
        - ./scripts/android-wait-for-emulator.sh
        - adb shell input keyevent 82
        - flutter devices
      script: echo "test 1 ..."
    - <<: *integration-test-staging
      os: osx
      env: INT_TEST=Test1
      before_install: &before_install_osx
        - echo before install osx 1
        - echo before install osx 2
      script: echo "test 1 ..."
    - <<: *integration-test-staging
      os: linux
      env: INT_TEST=Test2
      script: xxxx
    - <<: *integration-test-staging
      os: osx
      env: INT_TEST=Test2
      before_install: *before_install_osx
      script: xxxx
    - <<: *integration-test-staging
      os: linux
      env: INT_TEST=Test3
      script: echo "test 3 ..."
    - <<: *integration-test-staging
      os: osx
      env: INT_TEST=Test3
      before_install: *before_install_osx
      script: echo "test 3 ..."


    - stage: deploy to staging
      os: osx
      install: skip # bundle install is not required
      script: echo "Deploying to staging ..."


    - &test-staging
      stage: test staging
      os: osx
      install: skip
      script: echo "Testing staging, shard 1 ..."
    - <<: *test-staging
      script: echo "Testing staging, shard 2 ..."
    - <<: *test-staging
      script: echo "Testing staging, shard 3 ..."


  allow_failures:
    - env: INT_TEST=Test2
